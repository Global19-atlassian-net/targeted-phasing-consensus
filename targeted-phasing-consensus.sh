#!/bin/bash

#############
# INPUTS
#############

# coordinates of region of interest
CHROM=$1
START=$2
END=$3
# name of gene or region of interest
NAME=$4
# name of reference in SMRT Portal, or absolute path
REFERENCE=$5
# path to aligned_reads.bam generated by RS_ReadsOfInsert_Mapping
ALIGNED_READS_BAM=$6
# path to input.fofn used by RS_ReadsOfInsert_Mapping job
INPUT_FOFN=$7

#############
# PREPARATION
#############

# require a SMRT Analysis environment
: ${SEYMOUR_HOME:?"SMRT Analysis environment needs to be set by sourcing setup.sh"}

# reference can be a SMRT Analysis repository name
if [ ! -f $REFERENCE ]; then
    REFERENCE=$SEYMOUR_HOME/common/references/$REFERENCE/sequence/$REFERENCE.fasta
    if [ ! -f $REFERENCE ]; then
        echo "Reference not found: $REFERENCE"
        exit
    fi
fi


# get path to faidx.zip command
# http://stackoverflow.com/questions/59895/can-a-bash-script-tell-what-directory-its-stored-in
SCRIPT_PATH=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
FAIDX=$SCRIPT_PATH/faidx.zip

# Quiver params
ALG_PARMS=$SEYMOUR_HOME/analysis/etc/algorithm_parameters/2014-09
if [ ! -d $ALG_PARMS ]; then
    echo "Doesn't seem to be a SMRT Analysis 2.3 installation"
    exit
fi

#############
# WORKFLOW
#############

# create subdirectory for gene / region of interest
mkdir -p $NAME
cd $NAME

# grab subset of BAM file of the region of interest
samtools view -b $ALIGNED_READS_BAM $CHROM:$START-$END > subset.bam

# run samtools phase with "calmd" as per suggestion at http://samtools.sourceforge.net/samtools.shtml
samtools calmd -AEur subset.bam $REFERENCE | samtools phase -b prefix - > phase.out

# generate a reference of the region of interest
python $FAIDX $REFERENCE $CHROM:$START-$END > reference.fasta
samtools faidx reference.fasta

# for each phase 0 and 1...
for i in 0 1; do

    # generate a whitelist of relevant reads from the output of samtools phase
    samtools view prefix.$i.bam | awk '{ print $1 }' > whitelist$i.txt

    # Run modified portions of the RS_Resequencing pipeline:

    # identify subreads that pass this whitelist and other standard filters
    filter_plsh5.py --debug --filter="MinReadScore=0.7500,MinSRL=50,MinRL=50,ReadWhitelist=whitelist$i.txt" --trim='True' --outputDir=filtered_regions$i --outputFofn=filtered_regions$i.fofn $INPUT_FOFN

    # export filtered subreads using identified filtered regions
    pls2fasta $INPUT_FOFN filtered_subreads$i.fasta -trimByRegion -regionTable filtered_regions$i.fofn

    # align subreads to reference and include QV information for Quiver
    pbalign filtered_subreads$i.fasta reference.fasta aligned_reads$i.cmp.h5 --seed=1 --minAccuracy=0.75 --minLength=50 --concordant --algorithmOptions='-minMatch 12 -bestn 10 -minPctIdentity 70.0' --hitPolicy=randombest  --nproc=6 --pulseFile=$INPUT_FOFN --forQuiver --byread

    # run Quiver on cmp.h5 to generate consensus sequence
    variantCaller.py --skipUnrecognizedContigs  -x 20 --noEvidenceConsensusCall nocall -q 40 -P$ALG_PARMS -v -j6 --algorithm=quiver aligned_reads$i.cmp.h5 -r reference.fasta  -o consensus$i.fasta

done

# Use nucmer to show snp differences between the two phases
nucmer consensus0.fasta consensus1.fasta
#show-snps -C -x 10 out.delta > nucmer.snps
# show-snps is part of the Mummer package: http://mummer.sourceforge.net/
