#!/usr/bin/env python
"""generate_jobs.py TARGETBED CCSBAM SUBREADSBAM SUBREADSALIGNED_BOOL REFERENCE

Generates a shell script for each region of interest in the BED file.  These
scripts can be submitted to a job management system like sge or slurm, or
executed locally using GNU parallel or something similar.

TARGETBED   - consolidated target regions of interest, either hand-created or
              generated from probe BED file using capture2target.py
CCSBAM      - BAM file containing CCS aligned to REFERENCE (generated by SMRT Link or smrttools)
SUBREADSBAM - BAM file containing SUBREADS aligned to REFERENCE (generated by SMRT Link or smrttools)
REFERENCE   - reference fasta (indexed using `samtools index`)
"""
import sys
import os.path
from datetime import datetime

SCRIPT = 'targeted-phasing-consensus.sh'
HEADER = "#!/bin/bash\n"

# The following variables can be edited if you intend to submit these jobs to
# a cluster. If your cluster job scheduler requires special commands in the
# file header, edit the CLUSTER_HEADER variable.
CLUSTER = False  # True for cluster, False for local
CLUSTER_HEADER = """
#$ -cwd
#$ -V
#$ -j y
#$ -S /bin/bash
#$ -q default

"""


def datestamp(time=True):
    """Return a datestamp string.

    datestamp(time = True) -> str
    Format yyyymmddTHHMMSS by default; if time=False, format is yyyymmdd.
    """
    if time: fmt = '%Y%m%dT%H%M%S'
    else: fmt = '%Y%m%d'
    return datetime.strftime(datetime.now(), fmt)


def sanitize(filename):
    """Sanitize string for use in filename, since they may be used downstream.

    adapted from <https://stackoverflow.com/a/7406369>
    """
    keepcharacters = ('_', '-')
    return ''.join(c if (c.isalnum() or c in keepcharacters) else '_' for c in filename).rstrip()


def main():
    BEDFILE = os.path.realpath(sys.argv[1])
    CCSBAM = os.path.realpath(sys.argv[2])
    SUBREADSBAM = os.path.realpath(sys.argv[3])
    REF = os.path.realpath(sys.argv[4])

    # datestamp to provide uniqueness if you run more than once
    DATESTAMP = datestamp()

    with open(BEDFILE, 'rU') as bedfile:
        for row in bedfile:
            chrom, start, end, name = row.split()
            name = sanitize(name)
            filepath = os.path.realpath(os.path.join('./', 'phase_' + name + '_' + DATESTAMP + '.sh'))
            with open(filepath, 'w') as shellfile:
                shellfile.write(HEADER)
                if CLUSTER:
                    shellfile.write(CLUSTER_HEADER)
                # targeted-phasing-consensus.sh CCSBAM SUBREADSBAM ROINAME CHROM START END REFERENCE
                shellfile.write(' '.join([SCRIPT, CCSBAM, SUBREADSBAM,
                                          name, chrom, start, end,
                                          REF]))


if __name__ == '__main__':
    main()
